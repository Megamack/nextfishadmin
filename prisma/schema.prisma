// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        String       @id @default(cuid())
  name      String       @unique
  createdAt DateTime     @default(now())
  users     UserGroup[]
}

model User {
  id                     String      @id @default(cuid())
  firstName              String?
  lastName               String?
  username               String?
  email                  String?     @unique
  emailVerified          DateTime?
  phone                  String?
  bio                    String?
  image                  String?
  coverImage             String?
  password               String?
  passwordResetToken     String?     @unique
  passwordResetTokenExp  DateTime?
  role                   Role        @default(USER)
  createdAt              DateTime    @default(now())
  accounts               Account[]
  sessions               Session[]
  apiKeys                ApiKey[]
  groups                 UserGroup[] // many-to-many through UserGroup
}

model UserGroup {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Prevent duplicates
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  PAIDUSER
  ADMIN
}